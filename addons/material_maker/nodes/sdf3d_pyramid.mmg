{
	"name": "sdf3d_pyramid",
	"node_position": {
		"x": 0,
		"y": 0
	},
	"parameters": {
		"r": 0.4
	},
	"seed": 0,
	"seed_locked": false,
	"shader_model": {
		"code": "",
		"global": "// The MIT License, Copyright Â© 2019 Inigo Quilez\n// https://www.shadertoy.com/view/Ws3SDl\nfloat sdPyramid(vec3 p, float h) {\n    float m2 = h*h + 0.25;\n    p.xz = abs(p.xz);\n    p.xz = (p.z>p.x) ? p.zx : p.xz;\n    p.xz -= 0.5;\n    vec3 q = vec3( p.z, h*p.y-0.5*p.x, h*p.x+0.5*p.y);  \n    float s = max(-q.x,0.0);\n    float t = clamp( (q.y-0.5*q.x)/(m2+0.25), 0.0, 1.0 );\n    float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n\tfloat b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n    float d2 = max(-q.y,q.x*m2+q.y*0.5) < 0.0 ? 0.0 : min(a,b);\n    return sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y));\n}\n",
		"inputs": [

		],
		"instance": "",
		"longdesc": "Generates a pyramid as a signed distance function",
		"name": "Pyramid",
		"outputs": [
			{
				"longdesc": "Shows the pyramid",
				"sdf3d": "sdPyramid($uv.xzy, $r)",
				"shortdesc": "Output",
				"type": "sdf3d"
			}
		],
		"parameters": [
			{
				"control": "Radius1.r",
				"default": 0.5,
				"label": "",
				"longdesc": "The height of the pyramid",
				"max": 1,
				"min": 0,
				"name": "r",
				"shortdesc": "Height",
				"step": 0.01,
				"type": "float"
			}
		],
		"shortdesc": "Pyramid"
	},
	"type": "shader"
}
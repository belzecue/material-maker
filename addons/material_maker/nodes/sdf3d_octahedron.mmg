{
	"name": "sdf3d_octahedron",
	"node_position": {
		"x": 0,
		"y": 0
	},
	"parameters": {
		"r": 0.4
	},
	"seed": 0,
	"seed_locked": false,
	"shader_model": {
		"code": "",
		"global": "// The MIT License, Copyright Â© 2019 Inigo Quilez\n// https://www.shadertoy.com/view/wsSGDG\nfloat sdOctahedron(vec3 p, float s) {\n    p = abs(p);\n    float m = p.x + p.y + p.z - s;\n    vec3 r = 3.0*p - m;\n\tvec3 q;\n         if( r.x < 0.0 ) q = p.xyz;\n    else if( r.y < 0.0 ) q = p.yzx;\n    else if( r.z < 0.0 ) q = p.zxy;\n    else return m*0.57735027;\n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\n",
		"inputs": [

		],
		"instance": "",
		"longdesc": "Generates an octahedron as a signed distance function",
		"name": "Octahedron",
		"outputs": [
			{
				"longdesc": "Shows the sphere",
				"sdf3d": "sdOctahedron($uv, $r)",
				"shortdesc": "Output",
				"type": "sdf3d"
			}
		],
		"parameters": [
			{
				"control": "Radius1.r",
				"default": 0.5,
				"label": "",
				"longdesc": "The size of the octahedron",
				"max": 1,
				"min": 0,
				"name": "r",
				"shortdesc": "Size",
				"step": 0.01,
				"type": "float"
			}
		],
		"shortdesc": "Octahedron"
	},
	"type": "shader"
}